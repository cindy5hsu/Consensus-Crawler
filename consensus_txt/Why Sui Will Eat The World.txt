 Adni Abiodun All right, my name is Adni Abiodun. I'm one of the co-founders of a company called Mr. Labs. We are the primary contributors to a protocol called the 3 blockchain that's been live for a matter of about 18 months. We set up the company Mr. Labs to build infrastructure and we felt there was a fundamental problem with the internet. We had opportunities of building infrastructure, Facebook, Google and other large companies and we felt that we're reaching a point of mass centralization with the internet. Companies are now in a position to own your data, follow you wherever you go, decide to de-platform you whenever they don't like whatever you do, ultimately make decisions, become judge or executioner based on your data, based on their own preference, and also app stores charging 30% revenue share for products that you build, which ultimately isn't fair. So the internet is built in such a way where it encourages really centralized behavior and our goal as a company is to change that with a bunch of platforms and protocols that we're going to build for years and years to come. So SWE is a solution for that. If you think about SWE, what is SWE? And people like to use the words layer one, layer two. SWE is beyond that. It is a global coordination layer. It's a layer that's going to allow you to reach agreements across a broad spectrum of assets and broad spectrum of APIs. We believe in the future everybody's going to be offering a bunch of public APIs. You need a layer that allows you to coordinate the movement of assets between any public API in a very atomic and seamless way. That is a problem SWE is looking to solve. It just somehow you can call that a blockchain, but we believe the targetable, addressable market of solving that problem is way, way larger than what we're talking about in crypto. So the promise of Web3 is really self-custody. The promise of crypto is really being able to have your own user controls and the ability to coordinate what users want to do intently across the Internet. That is what Web3 promises. And we think the Internet cannot deliver that promise. Web3, married with some amazing technologies that we're building, will give you those opportunities to solve them. So SWE being a coordination layer, I want to tell you a bit about my team. I'm one of the co-founders. My name is Adinia Bj√∂rdin. We have George Denizes, who is our chief scientist. Sam Blackshare invented the Move programming language while he was at Meta. We also have Chalkius, who is our cryptographer. So you see the team's very different from a traditional Web3 company. We're not all skilled in one thing. Our skill base broadens. It goes very, very broad across programming languages. Evan, who led the R&D team at Facebook, also is an ACM computer science winner who worked on LLVM. So the skill set goes from distributed systems, cryptography. It goes to programming languages. It goes to system design. It goes to product. We believe you need all these amazing skill sets to actually build cohesive infrastructure in Web3, not just one skill set. So we talk about elasticity rather than scalability. Web3 likes to talk about scalability a lot, but really what matters is elasticity. What does that mean? It means as the demands increase for a platform, for a given platform, you can increase the supply. Web3 is built in a way of scarcity, namely as you have more and more transactions, you just hike up the fees and everyone pays more, which isn't really fair, which means you get penalized for success. And it might not even be your success. It could be a competitive success. It leads to higher fees for everybody else. SWE is built in a way in which we build search at Google and we build infrastructure at large organizations. So as you have more demand for block space in SWE, validators can add more machines, and the more machines you have in the network, the higher the throughput. So there's theoretically no maximum throughput for SWE because we can add capacity dynamically over time. Separately, there are a number of technologies that just make SWE a pleasure to build on. For example, Move programming language is one of the clearest innovations. This was built after looking at a number of programming languages at Meta, and we found that there was no real comparison for what you could do. If you want to have a world where money is programmable and you want ultimate safety, EVM isn't the way. Building a solidity is just not the way. And having people trust in just building in Rust is not going to allow you to onboard a lot of developers very quickly. And affording developers to have to know the underworkings of a platform really is a barrier to entry. So Move is one of the easiest languages to learn. It's actually object-based. Developers are learning Move programming language in about three to four days. We have comments that it's a 10x performance improvement in trying to build on Solana, for example. The other one is EK Login, where the chain itself will validate your session with OpenID Authenticator. So if you want to control your wallet with Google, you want to control it with Facebook, you want to control it with any service that uses OpenID, the chain itself will validate your session using what we call zero-knowledge proofs. DK Login is probably the most widely adopted consumer implementation of zero-knowledge proofs today. And then finally, we have a standard called kiosks. We heard about the idea of enforcing royalties. Creators were promised that platforms like blockchains will give you the ability to set rules around assets and control royalties and ensure that creators can keep earning their rewards over time. Well, kiosks is actually the only standard of Web3 that helps you really enforce those rules. So you can set really complex enforcement rules, like you can only trade this asset if you have a number of tokens. You can only trade this asset if it's a particular day and time of the year. You can only trade this asset if you're part of a particular club or membership. So you can set really, really complex rules around ownership, which is what you really want for digital assets. Again, the account model to a large degree is a bit of a failure for Web3. The world doesn't work on the basis of accounts. Developers are used to the concept of objects. In SWE, the smallest unit of computation is a strongly typed object. So you can actually build really complex rules and logic in SWE. You build an object, and that object can come with some rich set of rules, which we call intelligent assets. So you have an object that you build, and then you have a smart contract written and move that governs the rules around the object. Who can transfer that asset? How many of those should be in supply? What are the minting strategies required for the asset? Who is a KYC credential required for transfer or minting? So you can really set really complex rules around these assets that we think is very, very difficult to do in other traditional systems to a large degree. That's what differentiates SWE. And if you compare the code for writing a DEX in SWE versus EVM, for example, you find that it's probably somewhere in the region of four to five times less verbose writing in SWE than writing on EVM or Solidity. And finally, coordination. In a world where everybody's going to be offering their products and services via public APIs, you need a way to actually tie these APIs together in a very atomic way. So we have a system called PTBs in SWE. It's a paradigm that lets you coordinate any number of API calls together and execute them atomically. So if I want to build a super app, I want to book a flight. At the same time, I want to pay for my meals. And at the same time, I want to pay for an excursion on doing a trip. Those can be all different APIs offered publicly, but PTBs tie it together to make it happen atomically. So you can build amazing super apps in a world where the blockchain is an open marketplace for APIs and public goods and services. And developers can choose whatever API they want to build the product experiences that they care about. So SWE's had a groundbreaking year. We launched an upgrade to a consensus algorithm that cut the consensus latency all the way down to 395 milliseconds. Rather than talking about it, I want to show you an example of what this really means in the real world. So let's play the video. So this is a transaction as you'll do in the Solana space on Jupiter. You want to do a swap between one asset and another. You'll approve that on your wallet. And let's see how long it takes in Solana. This is the best result we're able to get trading on Sol. Now let's compare that to SWE with the same swap, any kind of asset you want to swap. Less than a second. So in the real world, what matters is real world performance. SWE is ultimately 6 or 7x faster, 6 or 7x faster in Solana in terms of finality. And also infinitely faster in terms of actual throughput and scalability as well. What does that mean in terms of numbers? TVL on the chain. SWE is one of the fastest growing network by TVL. Number of users, DeFi protocols. It's seeing a lot of mass adoption. Quite frankly, the reason why is it's finding developer product markets that developers are loving. They're building experience on SWE. They can build strictly differentiated products on SWE that they just can't build anywhere else. And that's why SWE has grown significantly beyond other chains. It's been around for 18 months and I think it's a number 14, 15 chain in the world. But I think in terms of layer 1s, it's in the top 10 already. So the team has done a really amazing job this year. And it's all to do with the innovation around making it an easy developer experience to build and also onboarding users with very simple semantics like ZK login, sponsored transactions, things that just make it feel like more of a Web 2 experience than anything else. Separately, we also believe gaming is going to be the biggest hook to bring users into Web 3. We actually think DeFi itself is not really a product. DeFi is a piece of infrastructure. Games all have the concept of ownership. They have the concept of transfers. And the idea of being able to own an asset, trade an asset, are all things that you do within a game. But now, you don't have to rebuild that infrastructure as a game dev moving forward. DeFi is going to power the future of gaming. And to cover that even more, we are so bullish on gaming that we announced the launch of the 3Play 0x1. So before going about 3Play 0x1, can we play the video on games as well? So the thing about games in Web 3 we've seen mostly are normally just not fun games. It's really kind of interesting, what we call spreadsheets that are made to look like games. But now we have top studios building on SWE. We're going to be announcing some major partnerships this year. Studios who build some of the largest games in the world, games that cost $100 million to make, not just the traditional Web 3 games. Beyond that as well, we also have a games console called the 3Play 0x1. This games console effectively allows you to play Steam, Epic games directly from the App Store in addition to Web 3 games. Whether you're playing a Web 2 or Web 3 game, you're earning points, you're earning rewards in a games console as powerful as your PC. The games console has some of the top specs. It's actually more powerful than the Steam Deck. All your games on Steam Deck, you'll be able to play directly on the 3Play 0x1. Your PC games as well, you'll be able to play directly on deck. But more importantly, you can actually take your games with you. And you don't have to select whether you want to play a Web 2 game or Web 3 game. You can simply have a device that plays all of them in a single device. The device also has an implementation where it's inbuilt into a wallet with ZK login. So simply by logging into the device, you have a wallet, and you never have to really worry about downloads or anything of that nature. The device is almost sold out. It's actually in the 3Play stores. You can order one today. I believe they're NFTs for people who order the device, and they're all earning some form of rewards over time as well. So to talk about what's next, I actually want to welcome George. George is our chief scientist. He's the brains behind a lot of the algorithms we build at Amiston Labs. And he wants to talk a bit more about the future of coordination on SWEET. Thank you. So the Internet has been around for a while, so we all had that experience, right? You visit a website, you read a nice story on the Internet, but then after a month, after six months, after a year, after five years, it disappears, right? Now, what is worse is that this experience now starts being replicated in the Web3 space. You buy an asset, you buy a digital asset, be it an NFT or some digital asset. In many cases, after a few years, the actual bytes, the actual image, the actual digital asset just disappears. And why does that happen? Because it is not actually stored on chain. Most of the Web3 digital assets are actually just a representation of the asset on chain, and the actual asset lives on a traditional cloud. Basically, the funding for that space runs out. It disappears. Even worse so, we actually are facing a situation where you're trying to use a smart contract. You think that you're interacting with something that has all the properties that we love about blockchain. It's immutable. It's going to be there tomorrow. It is censorship resistant, etc. But then you turn up, basically, after a month, thinking that you're going to get back access to your assets, and you realize that the website that represented, let's say, the user interface to that dApp is gone. Now, we can't really realize the future that, Adini, you described, we are out to realize, namely reinventing the Internet to make it permissionless, to make it high assurance, and only actually having representations of assets on chain. What we need is to make sure that the actual data that dApps use, either for the media, or for the UX, or for the actual logic of the application on the web, also has the same properties as the contracts and the data on chain. Namely, you can trust that it will be there. You can trust that it is what basically was uploaded, and you can trust that, you know, you will be able to use it tomorrow. For this reason, the second protocol that Mistin Labs is initiating is called Walrus, and it is a security-centralized storage protocol. And with Walrus, basically what you can do is you can bring on chain and have the same properties for the blob data, namely the images, the media, the website that, you know, drives the dApp, as basically for the data that your smart contract is handling on chain. Now, Walrus is built on SWE, and I will talk a little bit about that because Walrus is the best example so far in my mind about what we mean when we say that SWE is a coordination layer. So let's talk a little bit about how Walrus relates to SWE. We built SWE so that you can actually easily create decentralized dApps, right? And Walrus is just an example of such a dApp. So Walrus adds storage nodes to the universe of SWE. So there is basically a universe of storage nodes, but all of the coordination of the storage nodes, namely who they are, how they get paid, you know, how they change over time, what kind of media, what kind of files, what kind of, what is stored on them, all of that is coordinated through smart contracts on SWE. So what the result of that is that a lot of basically the storage on Walrus can be controlled through smart contracts and can actually be linked with all of the rest of the stuff that happens on SWE, including the DeFi, including all the other assets that are dealt on SWE. So now you can start having this kind of mixed experiences where on one side you have rich media. So for example, if you're building a ticketing application, you can actually have a ticket that has images, that has, you know, original graphics, etc. All of that is stored on Walrus, but that interacts with the logic of the ticketing, the payments, who has access to it, transferability, etc. That basically is still done on SWE. So now we have extended the realm of DApps, not just into dealing with metadata just on the SWE chain, but actually with the actual data that lives on Walrus. Now, let me tell you a little bit about Walrus under the hood because to some extent there are other decentralized storage networks, but Walrus does a few things better than competitors that are available out there. First of all, Walrus does not actually store files as copies on many machines, but instead it uses what is known as erasure coding. In erasure coding, what you do is you take your file, you encode it into something that is four or five times bigger, and then you store chunks of that encoded file on every node in the network. What does that mean? First of all, what it means is that the overhead that you pay for storing a file is actually quite low. It's only four to five times bigger what you store in the network than the file itself. But what you really get is a very high degree of resilience. Namely, any one-third of the storage nodes can actually disappear or stop responding, and you can still continue writing files into Walrus, or up to two-thirds can basically stop responding and disappear, and you can still read files in the network. And all of that you can do at the cost of just storing five times more data than you would store before. So this is very economic, it keeps the cost down, and it provides extreme resilience against failures to make sure that the files are there the next day. Now, the second thing that we really leverage with Walrus is that the economics of storage and the technology of storage has different economics than, let's say, blockchains, right? In blockchains, the more validators you usually add to a blockchain, the capacity stays the same. In fact, the capacity may go down because there is more overhead in coordinating all of those validators with each other. Walrus, however, has very different dynamics because the more storage nodes you add to Walrus, the more disk capacity there is that you can use to store more data, and the more bandwidth there is to be able to write data and read data from Walrus. So, in fact, the economics are very elastic, as Denny mentioned, namely, the more we need to store and the more we need to do input-output into Walrus, the more machines we can add and automatically, basically, we increase the capacity of the system, which is pretty sweet. As I already mentioned, Walrus has a deep integration into SWE, and SWE allows you to control pretty much all aspects of Walrus. You can control, of course, the currency that is used to buy storage. Storage resources are these intelligent resources and intelligent assets that, I didn't think you mentioned, you can split them, you can merge them, you can trade them. once you basically don't need to store stuff anymore, you can sell it off to a secondary market. It really is something that belongs to you. Storage can just be bought and it's yours, right? I mean, you can basically use it as if literally you bought a hard disk. So that's quite a new paradigm out there. And, of course, you can control all aspects of the lifecycle of files that are stored on Walrus. You can control how their lifetime is extended, you can expand their space, you can delete them, and all of that can be done embedded in smart contracts that control the logic of all of that. So, for example, you can say, look, I'll build an auditing app and it has a particular retention policy that is encoded in a smart contract and all of that is going to be taken care by the SWE security system and enforced on the Walrus site. Finally, with Walrus, we are trying to release some, you know, best-of-breed initial apps. The first one that will go out as soon as Walrus, well, that is already out on Testnet is what we call Walrus site. Walrus site basically tries to deliver the promise of the internet from back in the 90s and the 2000s. What you can do is you can just basically point to a folder that contains a website. It basically gets stored in Walrus and now you can start browsing it using its normal web browser. No need for wallet, no need for any special browser. It just appears on the internet as far as you're concerned. And that now has high integrity, high availability, and auditability about the changes of the website. The second technology we're going to roll out soon is called Seal. And with Seal, you can actually not just store public information on Walrus, but you can actually enforce access control. It uses an encryption technology that allows you to encrypt the file or parts of files that you upload in Walrus. And then it allows smart contracts to determine who has the right to access the keys to decrypt the file. Now that means that suddenly we can encode experiences relating to, for example, the content industry or the creator industry. You can upload an article, let's say, where the first paragraph is in clear, the rest of the article is encrypted, and then upon a payment on the blockchain, on SWE, you can basically get the key, decrypt the rest of the article and display the whole thing. So it allows suddenly the realm of smart contracts to provide conditional access to data and enable all of the use cases that we've seen Web2 covering, but without the assurance that these technologies provide. Now, to some extent, the reason we're building the whole SWE ecosystem and we're augmenting the SWE ecosystem with Walrus is not just to serve the Web3 needs that we see today, right? We believe that some of the technologies we're building and some of the properties that Walrus and SWE provide together can really be used to solve important things in the world, right? So, for example, charities have a need to demonstrate that the funding they get, the donations they get, really represent impact on the world. We didn't really have a very good way of actually doing that in the Web3 space. With Walrus, what they can do is they can upload media, reports, videos, both themselves and others about the work they do. And then, because of the tight integration with Web3 and the SWE blockchain, you can basically have DAOs that determine funding that actually direct the funding to the different charities depending on basically what media they have shared and what kind of evidence you can see. So, suddenly, you can create these richer experiences that are all integrated in decentralized system using both Walrus and SWE. Similarly, we now have, within reach, experiences relating to more traditional social media, let's say, right? You can have fans going to a sports event, recording the moment, sharing it socially with each other, with pictures, with videos, et cetera. And then, you can actually have brands that observe all of this activity on Walrus and SWE that reward fan engagement with VIP tickets or collectibles or tokens or whatever in order to actually have a direct relationship with their fan base. again, you use both Walrus for the media and the kind of, you know, bulk data and SWE in order to actually control the collectibles and the passes, et cetera. Finally, something that is very close to my heart is decentralized science. Science should be something that has high integrity, that everybody can trust and that is open to everybody and yet, today, let's face it, it is really behind closed doors or it is controlled by a cartel, effectively, of publishers that doesn't really let results flow as freely as possible. Now, again, one could think of a world where we combine Walrus and SWE in order to improve that. You can have scientists registering their experimental protocols, the results of their experiments, even their papers on Walrus because this is all big data, we can't just record it on a blockchain. and then the blockchain being used, again, as part of the review process that can be open and as part of actually directing funding to different projects that seem more promising than others in order to actually improve the scientific literature out there and the results humanity relies on. Now, all of this is aspirational and I hope that folks can go out there and be, you know, try to build some of that but in practice we already have a very healthy ecosystem of partners that are working with us to build specific things. So, for example, Ethereum is building an app that is streaming music and the music is, of course, stored on Walrus and all of the payments and the rights controls and the access controls are done on SWE. So, again, we have SWE effectively acting as a coordination layer both for the data that is on Walrus but also for the logic by which who can access what data. We're also working with OneChampionship and they're using Walrus, again, to store media relating to their martial arts brands and SWE, again, for doing fan engagement in relation to basically that media. Talus is also a very interesting partner of ours. They basically build AI agents that interact with the blockchain and, again, they use Walrus both to store their models, store their inferences, store their data sets and, of course, they interact with SWE in order to optimize particular things that the agent is asked to optimize. Tusky is a partner of ours that takes the basic technology around Walrus and Seal and builds an equivalent, let's say, cloud folder for people to store their data and be able to actually share their data. You can put up your files, you can share them with friends, you can share them with family or you can publish them using both SWE and Seal and Walrus. Decrypt is the well-known crypto media site and they basically use Walrus as part of their story to make sure that if basically their main website goes down, the media, basically, they have created remains available and you can still read it and, you know, they cannot be suffering from other failures or censorship in their infrastructure. And finally, Arkham is a partner that works in the space of security of blockchains and analytics of blockchains. They look at blockchains, they do monitoring, etc. And they are going to be publishing on Walrus datasets about basically the trustworthiness of addresses, the trustworthiness of transactions, etc. This is big data. You could not just store it on chain before. Now it's going to be available on the decentralized store that is built by Walrus. So, by all means, Walrus is today at kind of like a testnet phase. We have already a network with over 100 nodes. We are doing tests around how it scales and its performance. You are already able to bring up Walrus sites, store resources, read resources, write smart contracts on the sweet testnet that exercise all the functions that I'm actually mentioning here. We're observing some very impressive results where you can upload at the rate of hundreds of megabytes and download at the rate of hundreds of megabytes data. And we have about a petabyte of storage already on testnet. But the interesting news is that very soon we're actually going to be going into mainnet. And we hope that this is going to be happening in March. So join us and use it and build on it. Thank you. Thank you.